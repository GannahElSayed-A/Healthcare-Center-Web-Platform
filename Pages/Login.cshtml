@page
@model GUI.Pages.LoginModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f7fc;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .login-container {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }

        form {
            display: flex;
            flex-direction: column;
        }

        input[type="text"], input[type="password"], input[type="email"] {
            padding: 12px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

        input:focus {
            border-color: #4a90e2;
            outline: none;
        }

        button {
            padding: 12px;
            background-color: #4a90e2;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            button:hover {
                background-color: #357ab7;
            }

        .form-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
        }

            .form-footer a {
                color: #4a90e2;
                text-decoration: none;
            }

                .form-footer a:hover {
                    text-decoration: underline;
                }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            width: 100%;
            max-width: 400px;
            text-align: center;
        }

            .modal-content input[type="email"] {
                width: 100%;
            }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }

        .success-message, .error-message {
            margin-top: 10px;
            color: green;
        }

        .error-message {
            color: red;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <h1>Login</h1>
        @if (!string.IsNullOrEmpty(Model.ErrorMessage))

        {
            <p style="color: red; text-align: center;">@Model.ErrorMessage</p>
        }

        <form method="post">
            <input type="text" name="Username" placeholder="Username" required />
            <input type="password" name="Password" placeholder="Password" required />

            <button type="submit">Login</button>
            <div class="form-footer">
                <a href="#" id="forgotPasswordLink">Forgot Password?</a>
            </div>
        </form>
    </div>

    <!-- Modal for Forgot Password -->
    <div id="forgotPasswordModal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeModal">&times;</span>
            <h2>Forgot Password</h2>
            <p>Enter your email to receive a reset code:</p>
            <form id="forgotPasswordForm">
                <input type="email" id="email" placeholder="Enter your email" required />
                <button type="button" id="sendResetCode">Send Reset Code</button>
                <p class="success-message" id="successMessage"></p>
                <p class="error-message" id="errorMessage"></p>
            </form>
        </div>
    </div>

    <script>
        // Open modal
        const modal = document.getElementById("forgotPasswordModal");
        const forgotPasswordLink = document.getElementById("forgotPasswordLink");
        const closeModal = document.getElementById("closeModal");

        forgotPasswordLink.addEventListener("click", (e) => {
            e.preventDefault();
            modal.style.display = "block";
        });

        closeModal.addEventListener("click", () => {
            modal.style.display = "none";
        });

        // Close modal when clicking outside
        window.addEventListener("click", (e) => {
            if (e.target === modal) {
                modal.style.display = "none";
            }
        });

        // Handle "Send Reset Code" button
        const sendResetCodeButton = document.getElementById("sendResetCode");
        const emailInput = document.getElementById("email");
        const successMessage = document.getElementById("successMessage");
        const errorMessage = document.getElementById("errorMessage");

        sendResetCodeButton.addEventListener("click", async () => {
            const email = emailInput.value.trim();

            if (!email) {
                errorMessage.textContent = "Please enter a valid email.";
                return;
            }

            try {
                const response = await fetch("/Login?handler=ForgotPassword", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ email }),
                });

                const result = await response.json();

                if (result.success) {
                    successMessage.textContent = result.message;
                    errorMessage.textContent = "";
                } else {
                    errorMessage.textContent = result.message;
                    successMessage.textContent = "";
                }
            } catch (err) {
                errorMessage.textContent = "An error occurred. Please try again.";
            }
        });
    </script>
</body>
</html>
